// Shader downloaded from https://www.shadertoy.com/view/MljXWy
// written by shadertoy user gtoledo3
//
// Name: Too Much Candy!
// Description: Happy Halloween!
//"Too Much Candy!", George Toledo 2015. Uses pmalin's raymarching framework
float time=iGlobalTime;
vec2 mouse=iMouse.xy;
vec2 resolution=iResolution.xy;
vec2 surfaceSize=vec2(0.);

float kPI = acos(0.0);
float kHalfPi = asin(1.0);
float kTwoPI = kPI * 2.0;
//
const float PI=3.14159;


//#define ENABLE_MONTE_CARLO
//#define ENABLE_REFLECTIONS
#define ENABLE_FOG
#define ENABLE_SPECULAR
#define ENABLE_POINT_LIGHT
//#define ENABLE_POINT_LIGHT_FLARE
//#define ENABLE_BRIGHTLIGHT//for far cam to light distances
//disabled to make speedier in some compilers and allow them to be present for reference. edit- Also, make sure to remove dead code in "Get Scene" or methods referencing other methods, this is way more important
//#define ENABLE_WARPS
//#define ENABLE_EXTRA_DE
#define RADIANS 0.017453292

#ifdef ENABLE_MONTE_CARLO
vec4 gPixelRandom;
vec3 gRandomNormal;
//for monte carlo backbuffer randomization DOF
void CalcPixelRandom(){
	// Nothing special here, just numbers generated by bashing keyboard
	vec4 s1 = sin(time * 3.3422 + gl_FragCoord.xxxx * vec4(324.324234, 563.324234, 657.324234, 764.324234)) * 543.3423;
	vec4 s2 = sin(time * 1.3422 + gl_FragCoord.yyyy * vec4(567.324234, 435.324234, 432.324234, 657.324234)) * 654.5423;
	gPixelRandom = fract(2142.4 + s1 + s2);
	gRandomNormal = normalize( gPixelRandom.xyz - 0.5);
}
#endif

struct C_Ray{
	vec3 vOrigin;
	vec3 vDir;
};
 
struct C_HitInfo{
	vec3 vPos;
	float fDistance;
	vec3 vObjectId;
};
 
struct C_Material{
	vec3 cAlbedo;
	float fR0;
	float fSmoothness;
	vec2 vParam;
};
//<--Color&Material_Funcs------------------------------------------------------------>

vec3 hsv(const in float h, const in float s, const in float v) {
	return mix(vec3(1.),clamp((abs(fract(h+vec3(3.,2.,1.)/3.)*6.-3.)-1.),0.,1.),s)*v;
}

#ifdef ENABLE_WARPS

//<--Warps and Noise------------------------------------------------------------>
//******** Ashima Noise3D Start https://github.com/ashima/webgl-noise/blob/master/src/noise3D.glsl

vec3 mod289(const in vec3 p){
  return p - floor(p * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(const in vec4 p){
  return p - floor(p * (1.0 / 289.0)) * 289.0;
}

vec4 permute(const in vec4 p){
     return mod289(((p*34.0)+1.0)*p);
}

vec4 taylorInvSqrt(const in vec4 p){
  return 1.79284291400159 - 0.85373472095314 * p;
}

float snoise(const in vec3 p){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(p + dot(p, C.yyy) );
  vec3 x0 =   p - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 v = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = v - 49.0 * floor(v * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }

//******** Ashima Noise3D End

#endif
//<--------Matrix Functions----------------------------------------------------------->
vec3 RotateX( const in vec3 p, const in float angle ){
	float s = sin(angle);
	float c = cos(angle);	
	return vec3( p.x, c * p.y + s * p.z, -s * p.y + c * p.z);
}
 
vec3 RotateY( const in vec3 p, const in float angle ){
	float s = sin(angle);
	float c = cos(angle);	
	return vec3( c * p.x + s * p.z, p.y, -s * p.x + c * p.z);
}
     
vec3 RotateZ( const in vec3 p, const in float angle ){
	float s = sin(angle);
	float c = cos(angle);	
	return vec3( c * p.x + s * p.y, -s * p.x + c * p.y, p.z);
}
//<------------Object Unions------------------------------------------------------------->
vec4 DistCombineUnion( const in vec4 p1, const in vec4 p2 ){
	//if(p1.x < p2.x) return p1; else return p2;
	return mix(p1, p2, step(p2.x, p1.x));
}
 
vec4 DistCombineIntersect( const in vec4 p1, const in vec4 p2 ){
	return mix(p2, p1, step(p2.x,p1.x));
}
 
vec4 DistCombineSubtract( const in vec4 p1, const in vec4 p2 ){
	return DistCombineIntersect(p1, vec4(-p2.x, p2.yzw));
}
 
vec3 DomainRepeatXZGetTile( const in vec3 p, const in vec2 repeat, out vec2 tile ){
	vec3 result = p;
	vec2 tilePos = (p.xz / repeat) + 0.5;
	tile = floor(tilePos + 1000.0);
	result.xz = (fract(tilePos) - 0.5) * repeat;
	return result;
}
 
vec3 DomainRepeatXZ( const in vec3 p, const in vec2 repeat ){
	vec3 result = p;
	vec2 tilePos = (p.xz / repeat) + 0.5;
	result.xz = (fract(tilePos) - 0.5) * repeat;
	return result;
}
 
vec3 DomainRepeatY( const in vec3 p, const in float size ){
	vec3 result = p;
	result.y = (fract(p.y / size + 0.5) - 0.5) * size;
	return result;
}
 
vec3 DomainRotateSymmetry( const in vec3 p, const in float steps ){
	float angle = atan( p.x, p.z );
	float scale = steps / (kTwoPI);
	float steppedAngle = (floor(angle * scale + 0.5)) / scale;
	float s = sin(-steppedAngle);
	float c = cos(-steppedAngle);

	return vec3( c * p.x + s * p.z, p.y, -s * p.x + c * p.z);
}


//<-----------------------DE'S & some associated methods-------------------------------------------------->

float GetDistanceSphere(const in vec3 p, const in float r) {
    return length(p) - r;
}

float GetDistanceXYTorus( const in vec3 p, const in float r1, const in float r2 ){
	vec2 q = vec2(length(p.xy)-r1,p.z);
	return length(q)-r2;
}
float GetDistanceYZTorus( const in vec3 p, const in float r1, const in float r2 ){
	vec2 q = vec2(length(p.yz)-r1,p.x);
	return length(q)-r2;
}

float GetDistanceXZTorus( const in vec3 p, const in vec2 r ){
  	vec2 q = vec2(length(p.xz)-r.x,p.y);
  	return length(q)-r.y;
}
//Scene Start
	float GetDistanceSDCylinder( const in vec3 p, const in vec3 c ){
  	return length(p.xz-c.xy)-c.z;
}
float GetDistanceCylinderY(const in vec3 p, const in float r){
	return length(p.xz) - r;
}
//signed distance to box (iq) - glsl interpretation
float GetDistanceSDBox(const in vec3 p, const in vec3 size) {
	vec3 d = abs(p) - size;
	return min(max(d.x,max(d.y, d.z)), length(max(d, 0.0)));
}

float GetDistanceBox( const in vec3 p, const in vec3 size ){
	vec3 d = (abs(p) - size);
	return max(d.x, max(d.y, d.z));
}
 
float GetDistanceRoundedBox( const in vec3 p, const in vec3 size, const in float radius ){
	vec3 closest = max(min(p, size), -size);
	return length(closest - p) - radius;
}

float GetDistanceHexagon( const in vec3 p, const in vec2 h ){
    vec3 q = abs(p);
    return max(q.y-h.y,max(q.x+q.z*0.57735,q.z*1.1547)-h.x);
}

float GetDistanceTri(const in vec3 p, const in vec2 h){
    vec3 q = abs(p);
    return max(q.z - h.y, max(dot(vec2(q.x, p.y), vec2(0.866025, 0.5)), -p.y) - h.x*0.5);
}

float GetDistanceCylinder(const in vec3 p, const in float r, const in float c){
    return max(length(p.xz)-r, abs(p.y)-c);
}

//r1-lower radius, r2 upper radius, c = height/2
float GetDistanceCone(const in vec3 p, const in float r1, const in float r2, const in float c) {
	float d = length(p.xz)-mix(r1, r2, (c+p.y)/(c+c));
	d = max(d,-p.y-c);
	d = max(d,p.y-c);
	return d;
}

float DistFloor (const in vec3 p){
	//float f1 = 10.0 * sin(p.z * 0.125) * cos(p.x * 0.125); // texture(uTex0, vPos.xz * 0.05).r; // 
	float f1 = (15.0 , vec2(p.x,p.z)* 0.05).r; // 
	if (f1<2.5) f1=8.5;
	float f2 = p.y;
	const float fThickness = 13.0;
	return (f2 - f1) - fThickness;
}


//<---------------------------------SCENE_DE--------------------------------------------------------->
vec4 GetDistanceScene(const in vec3 vPos ){          
	vec4 vResult =  vec4(1.0);

	vec3 vObj1Domain=vPos;		
	vec3 vObj2Domain=vPos;
	vObj2Domain.y +=-1.5;

		vec4 vDistFloor = vec4(vPos.y+1., 1.0, vPos.xz);
		vec4 vDistObj = vec4(GetDistanceSphere(vObj2Domain+(cos((12.)*vPos.x/vPos.z)*.02),2.5), 2.0, vPos.xz);
		vec4 vDistInner = vec4(GetDistanceSphere(vObj2Domain+(cos((12.)*vPos.x/vPos.z)*.02),2.3), 2.0, vPos.xz);

		vec4 vDistEye = vec4(GetDistanceSphere(vObj2Domain+vec3(0.88,-0.9,-0.93),1.05), 3.0, vPos.xz);
		vec4 vDistEye2 = vec4(GetDistanceSphere(vObj2Domain+vec3(-0.88,-0.9,-0.93),1.05), 3.0, vPos.xz);
		vec4 vDistMouth = vec4(GetDistanceSphere(vObj2Domain+vec3(-0.,1.,-1.975)+(cos((22.)*vPos.x)*.012),1.5), 3.0, vPos.xz);

		vec4 vDistNose = vec4(GetDistanceTri(vObj2Domain+vec3(-0.,-1.000,-1.95)+(cos((22.)*vPos.x)*.012),vec2(.5,.5)), 3.0, vPos.xz);
		//vec4 vDistVomit = vec4(GetDistanceRoundedBox(vObj2Domain+snoise(-.1*iGlobalTime+vObj2Domain)*.193+vec3(-0.1,1.4,-1.975)+(cos((2.)*vPos.y)*.1972)+((cos(22.*vPos.x)*.02)+(cos(2.)*vPos.z)*.1992),vec3(.927,.5,5.5),.1), 4.0, vPos.xz);
		vec4 vDistVomit = vec4(GetDistanceRoundedBox(vObj2Domain+vec3(-0.1,1.4,-14.3)+(cos((12.)*vPos.y)*.01972)
               +((cos(22.*vPos.x)*.02)+(cos(4.*vPos.z-time)*.03992)+(cos(1.5*vPos.z-time*3.3)*.046992)),vec3(.927,.5,15.5),.1), 4.0, vPos.xz);

	
    	vec4 vDistStem = vec4(GetDistanceHexagon(vObj2Domain+vec3(-0.,-2.5,-0.)+(((22.)*vPos.x)*.012),vec2(.25,.25)), 5.0, vPos.xz);

		vResult =DistCombineUnion(vResult,vDistObj);
		vResult =DistCombineSubtract(vResult,vDistMouth);
		vResult =DistCombineSubtract(vResult,vDistEye);
		vResult =DistCombineSubtract(vResult,vDistEye2);
		vResult =DistCombineSubtract(vResult,vDistNose);
		vResult =DistCombineSubtract(vResult,vDistInner);
		vResult =DistCombineUnion(vResult,vDistVomit);
		vResult =DistCombineUnion(vResult,vDistStem);

		vResult = DistCombineUnion(vResult, vDistFloor);
		       
		return vResult;
}
//<---------------------------------SCENE_TEXTURE--------------------------------------------------------->

//COLOR AND TEXTURE
C_Material GetObjectMaterial( const in vec3 vObjId, const in vec3 vPos ){
	C_Material mat;
		       
	if(vObjId.x < 1.5){
		// floor
		mat.fR0 = 0.01;
		mat.fSmoothness = 0.01;
		mat.cAlbedo = vec3(.1,.35,.5)* hsv(.225+(vPos.x*.01),.82,1.);
	}
	else
	if(vObjId.x < 2.5){
		mat.fR0 = 0.01;
		mat.fSmoothness = 0.069;	
		mat.cAlbedo=vec3(1.)* hsv(.0+(vPos.z*.005), .79, 1.0);
	}
	else
	if(vObjId.x < 3.5){
		mat.fR0 = 0.01;
		mat.fSmoothness = 0.169;
		mat.cAlbedo=vec3(1.);
	}
	else
	if(vObjId.x < 4.5){
		mat.fR0 = 0.021;
		mat.fSmoothness = 0.59;
		mat.cAlbedo= hsv(.01*time+.25+(vPos.x*.38), 1., .5);	
	}
		else
	if(vObjId.x < 5.5){
		mat.fR0 = 0.01;
		mat.fSmoothness = 0.0169;
		mat.cAlbedo=vec3(1.)* hsv(.4+(vPos.x*.001), .7, .25);
		
	}
	
	return mat;
}

vec3 GetSkyGradient( const in vec3 vDir ){
	float fBlend = vDir.y * 0.5 + 0.5;
	return mix(vec3(0.0, 0.0, 0.0), vec3(0.95, 0.96, 0.7), fBlend);
}
//<---------------------------------SCENE_LIGHT_POS&COL--------------------------------------------------------->

vec3 GetLightPos(){
	vec3 vLightPos = vec3(0.0, 2.0, 1.0);
	#ifdef ENABLE_MONTE_CARLO        
	vLightPos += gRandomNormal * 0.025;
	#endif
	return vLightPos;
}

vec3 GetLightCol(){
	#ifdef ENABLE_BRIGHTLIGHT	
	return vec3(32.0, 22.0, 18.0) * 180.0;
	#endif
	return vec3(32.0, 6.0, 1.0) * 40.0;
}
//<------------------------------------------------------------------------------------------>
 
vec3 GetAmbientLight(const in vec3 vNormal)
{
	return GetSkyGradient(vNormal);
}

#define kFogDensity 0.05
void ApplyAtmosphere(inout vec3 col, const in C_Ray ray, const in C_HitInfo intersection)
{
	#ifdef ENABLE_FOG
	// fog
	float fFogAmount = exp(intersection.fDistance * -kFogDensity);
	vec3 cFog = GetSkyGradient(ray.vDir);
	col = mix(cFog, col, fFogAmount);
	#endif
       
	// glare from light (a bit hacky - use length of closest approach from ray to light)
	#ifdef ENABLE_POINT_LIGHT_FLARE
	vec3 vToLight = GetLightPos() - ray.vOrigin;
	float fDot = dot(vToLight, ray.vDir);
	fDot = clamp(fDot, 0.0, intersection.fDistance);
       
	vec3 vClosestPoint = ray.vOrigin + ray.vDir * fDot;
	float fDist = length(vClosestPoint - GetLightPos());
	col += GetLightCol() * 0.01/ (fDist * fDist);
	#endif     
}
vec3 GetSceneNormal( const in vec3 vPos )
{
	// tetrahedron normal
	float fDelta = 0.025;

	vec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);
	vec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);
	vec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);
	vec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);

	float f1 = GetDistanceScene( vPos + vOffset1 ).x;
	float f2 = GetDistanceScene( vPos + vOffset2 ).x;
	float f3 = GetDistanceScene( vPos + vOffset3 ).x;
	float f4 = GetDistanceScene( vPos + vOffset4 ).x;

	vec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;

	return normalize( vNormal );
}

#define kRaymarchEpsilon 0.001
#define kRaymarchMatIter 32
#define kRaymarchStartDistance .1
// This is an excellent resource on ray marching -> http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm
void Raymarch( const in C_Ray ray, out C_HitInfo result, const float fMaxDist, const int maxIter )
{         
	result.fDistance = kRaymarchStartDistance;
	result.vObjectId.x = 0.0;
							   
	for(int i=0;i<=kRaymarchMatIter;i++)               
	{
		result.vPos = ray.vOrigin + ray.vDir * result.fDistance;
		vec4 vSceneDist = GetDistanceScene( result.vPos );
		result.vObjectId = vSceneDist.yzw;

		// abs allows backward stepping - should only be necessary for non uniform distance functions
		if((abs(vSceneDist.x) <= kRaymarchEpsilon) || (result.fDistance >= fMaxDist) || (i > maxIter))
		{
			break;
		}                         

		result.fDistance = result.fDistance + vSceneDist.x;     
	}
       
       
	if(result.fDistance >= fMaxDist)
	{
		result.vPos = ray.vOrigin + ray.vDir * result.fDistance;
		result.vObjectId.x = 0.0;
		result.fDistance = 1000.0;
	}
}

float GetShadow( const in vec3 vPos, const in vec3 vLightDir, const in float fLightDistance )
{
	C_Ray shadowRay;
	shadowRay.vDir = vLightDir;
	shadowRay.vOrigin = vPos;

	C_HitInfo shadowIntersect;
	Raymarch(shadowRay, shadowIntersect, fLightDistance, 32);
																									    
	return step(0.0, shadowIntersect.fDistance) * step(fLightDistance, shadowIntersect.fDistance );          
}

// http://en.wikipedia.org/wiki/Schlick's_approximation
float Schlick( const in vec3 vNormal, const in vec3 vView, const in float fR0, const in float fSmoothFactor)
{
	float fDot = dot(vNormal, -vView);
	fDot = min(max((1.0 - fDot), 0.0), 1.0);
	float fDot2 = fDot * fDot;
	float fDot5 = fDot2 * fDot2 * fDot;
	return fR0 + (1.0 - fR0) * fDot5 * fSmoothFactor;
}

float GetDiffuseIntensity(const in vec3 vLightDir, const in vec3 vNormal)
{
	return max(0.0, dot(vLightDir, vNormal));
}

float GetBlinnPhongIntensity(const in C_Ray ray, const in C_Material mat, const in vec3 vLightDir, const in vec3 vNormal)
{           
	vec3 vHalf = normalize(vLightDir - ray.vDir);
	float fNdotH = max(0.0, dot(vHalf, vNormal));

	float fSpecPower = exp2(4.0 + 6.0 * mat.fSmoothness);
	float fSpecIntensity = (fSpecPower + 2.0) * 0.125;

	return pow(fNdotH, fSpecPower) * fSpecIntensity;
}

// use distance field to evaluate ambient occlusion
float GetAmbientOcclusion(const in C_Ray ray, const in C_HitInfo intersection, const in vec3 vNormal)
{
	vec3 vPos = intersection.vPos;
       
	float fAmbientOcclusion = 1.0;
       
	float fDist = 0.0;
	for(int i=0; i<=5; i++)
	{
		fDist += 0.1;

		vec4 vSceneDist = GetDistanceScene(vPos + vNormal * fDist);

		fAmbientOcclusion *= 1.0 - max(0.0, (fDist - vSceneDist.x) * 0.2 / fDist );                                   
	}
       
	return fAmbientOcclusion;
}
 
vec3 GetObjectLighting(const in C_Ray ray, const in C_HitInfo intersection, const in C_Material material, const in vec3 vNormal, const in vec3 cReflection)
{
	vec3 cScene ;
	
	vec3 vSpecularReflection = vec3(0.0);
	vec3 vDiffuseReflection = vec3(0.0);
	
	float fAmbientOcclusion = GetAmbientOcclusion(ray, intersection, vNormal);
	vec3 vAmbientLight = GetAmbientLight(vNormal) * fAmbientOcclusion;
	
	vDiffuseReflection += vAmbientLight;
	
	vSpecularReflection += cReflection * fAmbientOcclusion;
		       
	#ifdef ENABLE_POINT_LIGHT
	vec3 vLightPos = GetLightPos();
	vec3 vToLight = vLightPos - intersection.vPos;
	vec3 vLightDir = normalize(vToLight);
	float fLightDistance = length(vToLight);
	
	float fAttenuation = 1.0 / (fLightDistance * fLightDistance);
	
	float fShadowBias = 0.1;             
	float fShadowFactor = GetShadow( intersection.vPos + vLightDir * fShadowBias, vLightDir, fLightDistance - fShadowBias );
	vec3 vIncidentLight = GetLightCol() * fShadowFactor * fAttenuation;
	
	vDiffuseReflection += GetDiffuseIntensity( vLightDir, vNormal ) * vIncidentLight;                                                                                 
	vSpecularReflection += GetBlinnPhongIntensity( ray, material, vLightDir, vNormal ) * vIncidentLight;
	#endif //ENABLE_POINT_LIGHT
	
	vDiffuseReflection *= material.cAlbedo;              
	
	#ifdef ENABLE_SPECULAR
	float fFresnel = Schlick(vNormal, ray.vDir, material.fR0, material.fSmoothness * 0.9 + 0.1);
	cScene = mix(vDiffuseReflection , vSpecularReflection, fFresnel);
	#else
	cScene = vDiffuseReflection;
	#endif
	
	return cScene;
}

vec3 GetSceneColourSimple( const in C_Ray ray )
{
	C_HitInfo intersection;
	Raymarch(ray, intersection, 16.0, 32);
					    
	vec3 cScene;

	if(intersection.vObjectId.x < 0.5)
	{
		cScene = GetSkyGradient(ray.vDir);
	}
	else
	{
		C_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos);
		vec3 vNormal = GetSceneNormal(intersection.vPos);

		// use sky gradient instead of reflection
		vec3 cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));

		// apply lighting
		cScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );
	}

	ApplyAtmosphere(cScene, ray, intersection);

	return cScene;
}

vec3 GetSceneColour( const in C_Ray ray )
{                                                           
	C_HitInfo intersection;
	Raymarch(ray, intersection, 60.0, 256);
			    
	vec3 cScene;
       
	if(intersection.vObjectId.x < 0.5)
	{
		cScene = GetSkyGradient(ray.vDir);
	}
	else
	{
		C_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos);
		vec3 vNormal = GetSceneNormal(intersection.vPos);

		#ifdef ENABLE_MONTE_CARLO
		vNormal = normalize(vNormal + gRandomNormal / (5.0 + material.fSmoothness * 200.0));
		#endif

		vec3 cReflection;
		#ifdef ENABLE_REFLECTIONS    
		{
			// get colour from reflected ray
			float fSepration = 0.05;
			C_Ray reflectRay;
			reflectRay.vDir = reflect(ray.vDir, vNormal);
			reflectRay.vOrigin = intersection.vPos + reflectRay.vDir * fSepration;
															      
			cReflection = GetSceneColourSimple(reflectRay);                                                                         
		}
		#else
		cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));                               
		#endif
		// apply lighting
		cScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );
	}
       
	ApplyAtmosphere(cScene, ray, intersection);
  
	return cScene;//* hsv((cScene.r*.12)+.1, .15, 1.0); 
}

void GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, out C_Ray ray)
{
	vec2 vPixelCoord = gl_FragCoord.xy;
	#ifdef ENABLE_MONTE_CARLO
	vPixelCoord += gPixelRandom.zw;
	#endif
	vec2 vUV = ( vPixelCoord / resolution.xy );
	vec2 vViewCoord = vUV * 2.0 - 1.0;

	vViewCoord *= 0.75;
       
	float fRatio = resolution.x / resolution.y;

	vViewCoord.y /= fRatio;                           

	ray.vOrigin = vPos;

	vec3 vRight = normalize(cross(vForwards, vWorldUp));
	vec3 vUp = cross(vRight, vForwards);
	    
	ray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards);        
}

void GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, out C_Ray ray)
{
	vec3 vForwards = normalize(vInterest - vPos);
	vec3 vUp = vec3(0.0, 1.0, 0.0);

	GetCameraRay(vPos, vForwards, vUp, ray);
}

vec3 OrbitPoint( const in float fHeading, const in float fElevation )
{
	return vec3(sin(fHeading) * cos(fElevation), sin(fElevation), cos(fHeading) * cos(fElevation));
}

vec3 Gamma( const in vec3 cCol )
{
	return cCol * cCol;
}

vec3 InvGamma( const in vec3 cCol )
{
	return sqrt(cCol);
}


vec3 Tonemap( const in vec3 cCol )
{
	// simple Reinhard tonemapping operator     
	vec3 vResult = cCol / (1.0 + cCol);

	return Gamma(vResult);
}

vec3 InvTonemap( const in vec3 cCol )
{
	vec3 vResult = cCol;
	vResult = clamp(vResult, 0.01, 0.99);
	vResult = InvGamma(vResult);
	return - (vResult / (vResult - 1.0));
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	#ifdef ENABLE_MONTE_CARLO             
	CalcPixelRandom();
	#endif
       
	C_Ray ray;
       
	const float fCamreaInitialHeading = -0.5;
	const float fCamreaInitialElevation = 0.3945;
	const float fCamreaInitialDist = 27.0;
	const float fCameraHeight = -.41;
	const float fOrbitSpeed = 1.0;
	
	// This magic stolen from other 3d pan/zoom examples
	float fZoom = surfaceSize.y * 0.5 + 0.4;
	
	//vec2 vCenterPosition = mouse+(0.5 - ( gl_FragCoord.xy / resolution )) * surfaceSize;
    vec2 vCenterPosition = (0.5 - ( gl_FragCoord.xy / resolution )) * surfaceSize;
	float fHeading = vCenterPosition.x * fOrbitSpeed + fCamreaInitialHeading;
	float fElevation = (vCenterPosition.y * fOrbitSpeed + fCamreaInitialElevation);
	
	vec3 vCameraPos = OrbitPoint(fHeading, fElevation) * fCamreaInitialDist * fZoom;
	
	vCameraPos += vec3(0.0, -fCameraHeight, 0.0);
	#ifdef ENABLE_MONTE_CARLO             
	float fDepthOfField = 0.1;
	vCameraPos += gRandomNormal * fDepthOfField;
	#endif
       
	GetCameraRayLookat( vCameraPos, vec3(1.974, 1.5, 0.0), ray);
	//GetCameraRayLookat(vec3(0.0, 0.0, -5.0), vec3(0.0, 0.0, 0.0), ray);
       
	vec3 cScene = GetSceneColour( ray );   
       
	float fExposure = 3.5;
	cScene = cScene * fExposure;
       
	#ifdef ENABLE_MONTE_CARLO                              
	vec3 cPrev = texture2D(backbuffer, gl_FragCoord.xy / resolution).xyz;
	// add noise to pixel value (helps values converge)
	cPrev += (gPixelRandom.xyz - 0.5) * (1.0 / 255.0);
	cPrev = InvTonemap(cPrev);
	// converge sweep
	float fBlend = 0.1;
	vec3 cFinal = mix(cPrev, cScene, fBlend);
	#else
	vec3 cFinal = cScene;
	#endif
	
	cFinal = Tonemap(cFinal);
       	
	float fAlpha = 1.0;

	fragColor = vec4( cFinal, fAlpha );
}
